@import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&family=Griffy&display=swap');


/* GENERAL */

/* Setup */
:root {
  --color-orange-crush: #ecc352;
  --color-avacado-black: #363a18;
}

body {
  background: var(--color-orange-crush);}

p { 
   /* font-family: ; */
    color: #363a18; 
    padding: .5vh; 
    margin: .5vh; 
}

h1 {
    /*font-family: ; */
    color: #363a18; 
    padding: .5vh; 
    margin: .5vh; 
}

/***** CONTRAST *****/

/*FONT
.contrast {font-family: ;}
.header2 { font-family: ;}
.para { font-family ;} */

/*COLOR*/
.color1{ color: rgb(46, 12, 184); }
.color2{ color:rgb(12, 184, 26); }
.blend{ color: #e2c268;}
.stand { color:black;}

/***** REPETITION *****/
/* FONT 
.font1 {font-family: ;}
.font2 { font-family: ;}
.font3 { font-family ;} 
.explainfont { font-family ;}*/

/***** ALIGNMENT *****/

/*terms*/
/*container*/
.header          { grid-area: header }
.content1        { grid-area: content1; }
.content2        { grid-area: content2; }
.content3        { grid-area: content3; }
.sidebar-right   { grid-area: sidebar-right;}
.content4        {grid-area: content4;}

/*containz*/
.head            { grid-area: head }
.contentone      { grid-area: contentone; }
.contenttwo      { grid-area: contenttwo; }
.contentthree    { grid-area: contentthree; }
.foot            { grid-area: foot;}
.contentfour     {grid-area: contentfour;}

.container      {
    display: grid;
    grid-template-columns: 1fr 1fr 200px;
    grid-template-rows: 50vh 1fr 1fr 1fr 1fr 100px;
    grid-gap: 1rem;
    grid-template-areas:
      "header header header"
      "content1 content1 content2"
      "content3 content3 content2"
      "sidebar-right content4 content-2"
      "sidebar-right content4 content-2";
   }
  
   .container > div {
    border: 1px #363a18;
  }

  .containz{
    display: grid;
    grid-template-columns: repeat(4 1fr);
    grid-template-rows: repeat(4 1fr);
    grid-gap: 1rem;
    grid-template-areas:
      "head head head head"
      "contentone contentone contenttwo contenttwo"
      "contentthree contentthree contentfour contentfour"
      "footer footer footer footer";
   }

  .containz > div {
    border-color: black;
  }

/***** PROXIMITY *****/

/* TYPOGRAPHY */

/* Families */
* { font-family: 'Crimson Text', serif; }
h1 { font-family: 'Griffy', cursive; }


/* ALIGNMENT RULES */
.align-self-center {align-self: center}

/* TEN AREA */ 
.ten-area {
  display: grid;
  grid-template-columns: 100px repeat(4, 1fr); /* first tell it how many times to repeat something then tell the value to repeat (separated by comma); adding a value before the repeat (like 100px repeat(4, 1fr) makes the first column always remain at that value (can do this for multiple rows like '50px 100px repeat (2, 1fr)*/ /* you can do the same thing with grid-template-rows */ /*can use 'max content' and then the content will dictate the maximum width (this is a fixed size but adapts as the content changes, like if you change the heading or whatever the content is), same concept with 'min-content' --> smallest it can be based on available content */
  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr; /* works same way a grid-template-columns, */
  gap: 1em; /*gap is like margin as well - pushes between elements, using em will keep the gaps flexible*/
}

/* using just grid-template-columns makes implicit grid, where the computer makes the amount of rows; using grid-template-rows with g-t-c makes explicit rows, where you determine the amount of rows */ 

.ten-area > div {
  border: 1px solid var(--color-avacado-black);
}

/* GRID LINES AND CELLS */

.container {
  display: grid;
  grid-template-columns: 200px repeat(4, 1fr) 200px; /* makes 6 columns*/
  grid-template-rows: 25vw repeat(9, 1fr) 10vw; /* makes 11 rows */
  grid-gap: 1rem;
}

.container > div {
  border: 1px solid var(--color-avacado-black);
}

/* SPECIFIC */

.header {
  grid-column: 1/-1; /* start line then end line */
  grid-row: 1/2; /* start line then end line */
}
.nav-left {
  grid-column: 1/2;
  grid-row: 2/-2;
}
.content1 {
  grid-column: 2/-2;
  grid-row: 2/7;
}
.content2 {
  grid-column: 2/-2;
  grid-row: 7/9;
}
.content3 {
  grid-column: 2/-2;
  grid-row: 9/11;
}
.sidebar-right {
  grid-column: -2/-1;
  grid-row: 2/11;
}
.footer{
  grid-column: 1/-1;
  grid-row: 11/-1;
}

/* DEFINE GRID AREA KEYWORDS (would normally be at top)*/

.head         { grid-area: head; }
.nav_l       { grid-area: nav-left; }
.sidebar-r  { grid-area: sidebar-r; }
.content-one      { grid-area: contentone; }
.content-two      { grid-area: contenttwo; }
.content-three      { grid-area: contentthree; }
.foot         { grid-area: foot; }

/* then, can use these terms to make grid areas with grid-template-areas, like below */
 
.contain{
  display: grid;
  grid-template-columns: 200px 1fr 200px;
  grid-template-rows: 50vh 1fr 1fr 1fr 1fr 100px;
  grid-gap: 1rem;
  grid-template-areas:
    "head head head"
    "nav-l contentone sidebar-r"
    "nav-l contenttwo sidebar-r"
    "nav-l contentthree sidebar-r"
    "foot foot foot";
 }

 .contain > div {
  border: 1px solid var(--color-avacado-black);
}

/* EFFECTS */

/* <hr> - horizontal rule effects */
.scoring {
  background-image: repeating-linear-gradient(-45deg, transparent, transparent 8px, currentcolor 8px, currentcolor 10px);
  padding: 0px;
  aspect-ratio: 20 / 1;
  border: 0px;
  display: block;
  color: var(--color-avacado-black);
}

.thicker {
  background-color: currentcolor;
  padding: 0px;
  height: 4px;
  border: 0px;
  display: block;
  color: inherit;
}